
@layout LoginLayout
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject ProtectedSessionStorage ProtectedSessionStore

<div class="limiter">
	<div class="container-login100">
		<div class="wrap-login100">

			<EditForm Model="@userObj" OnValidSubmit="CheckEmployee">
				<div class="login100-form validate-form">
					<span class="login100-form-title p-b-43">
						Login to Moral Nursery
					</span>


					<div class="wrap-input100 validate-input" data-validate="UserName is required">
						<input class="input100" type="text" name="username" @bind="@userObj.Username" required>
						<span class="focus-input100"></span>
						<span class="label-input100">UserName</span>
					</div>


					<div class="wrap-input100 validate-input" data-validate="Password is required">
						<input class="input100" type="password" name="pass" @bind="@userObj.PasswordHash" required>
						<span class="focus-input100"></span>
						<span class="label-input100">Password</span>
					</div>



					<div class="container-login100-form-btn">

						<button class="login100-form-btn" type="submit" disabled="@IsLoading">
							Login
						</button>



					</div>
					@if (IsLoading)
					{
						<div>
							<span style="color:dodgerblue;">
								Checking
								<Spinner Class="me-3" Type="SpinnerType.Dots" Color="SpinnerColor.Primary" Visible="@IsLoading" />
							</span>
						</div>
					}
					@if (showError)
					{
						<p style="color:red;">@errorMsg</p>
					}


				</div>
			</EditForm>
			<div class="login100-more" style="background-image: url('images/bg-02.jpg');">
			</div>

		</div>
	</div>
</div>



@code {
	bool showError = false;
	bool IsLoading = false;
	string UserName { get; set; }
	string Password { get; set; }
	string errorMsg = "";
	MoralNursery.Data.Models.User userObj = new MoralNursery.Data.Models.User();
	async Task CheckEmployee()
	{
		showError = false;
		try
		{
			IsLoading = true;

			var user = await Task.Run(() => UserService.CheckUser(userObj.Username, userObj.PasswordHash));
			IsLoading = false;
			showError = false;
			await Task.CompletedTask;
			if (user != null)
			{
				if (user.IsActive == null || user.IsActive == false)
				{
					errorMsg = "The user account is currently inactive.";
					showError = true;
					UserName = "";
					Password = "";
				}
				else
				{
					showError = false;
					await ProtectedSessionStore.SetAsync("UserName", user.Username);
					await ProtectedSessionStore.SetAsync("UserId", user.Id);
					NavigationManager.NavigateTo("/home/index");
				}


			}
			else
			{
				errorMsg = "Invalid Username or password.";
				showError = true;
				UserName = "";
				Password = "";
			}
		}
		catch
		{
			errorMsg = "An error occurred while processing your request.";
			showError = true;

		}
		finally
		{
			IsLoading = false;
		}



	}

}