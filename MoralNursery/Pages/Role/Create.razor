@page "/role/create"
@inject IRoleService RoleService
@inject IFunctionService FunctionService
@inject NavigationManager NavigationManager
<style>
    .row {
        margin-top: 10px !important;
    }
</style>
<Card Style="width:100%;margin-bottom:50px;">
    <CardHeader Color="CardColor.Light">
        <div class="row">
            <div class="col-lg-9">
                <h2>New Role</h2>
            </div>
            <div class="col-lg-3 text-right">                
                <a style="border:none;background-color:transparent;" href="/role" role="button">
                    <Icon Name="IconName.TextIndentRight" Size="IconSize.x2" Color="IconColor.Primary" />
                </a>

            </div>
        </div>
        
    </CardHeader>
    <CardBody>
        <EditForm Model="@roleObj" OnValidSubmit="CreateRole">
            <div class="row">
                <div class="col-md-8">
                    <div class="form-group">
                        <label for="Classroom" class="control-label"> Role Name</label>
                        <input for="Classroom" class="form-control" @bind="@roleObj.RoleName" required />
                        <ValidationMessage For="@(() => roleObj.RoleName)" />
                        @if (notValidRoleName)
                        {
                            <Alert Color="AlertColor.Danger" Dismissable="false">
                                <Icon Name="IconName.ExclamationTriangleFill" class="me-2">

                                </Icon>"The role name is already exist."
                            </Alert>
                        }
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-8">
                    <div class="form-group">
                        <label for="Classroom" class="control-label"> Functions</label>

                        @if (functionList != null)
                        {
                            @foreach (var function in functionList)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="@function.Id" @onchange="@(e => ToggleFunctionSelection(function.Id, e.Value))" />
                                    <label class="form-check-label" for="@function.Id">
                                        @function.FunctionDescription
                                    </label>
                                </div>
                            }
                        }


                    </div>
                </div>
            </div>
            <div class="row" style="margin-top:50px;margin-bottom:50px;">
                <div class="col-md-4">
                    <div class="form-group">
                        <input type="submit" class="btn btn-primary" value="Save" />
                        <input type="button" class="btn btn-primary" @onclick="@Cancel" value="Cancel" />
                    </div>
                </div>
            </div>
        </EditForm>
    </CardBody>
</Card>

@code {
    Role roleObj = new Role();
    bool notValidRoleName;
    List<Function> functionList = new List<Function>();
    private List<int> selectedFunctionIds = new();

    protected override async Task OnInitializedAsync()
    {
        functionList = await Task.Run(() => FunctionService.GetFunctions());

    }
    private void ToggleFunctionSelection(int functionId, object isChecked)
    {
        if ((bool)isChecked)
        {
            selectedFunctionIds.Add(functionId);
        }
        else
        {
            selectedFunctionIds.Remove(functionId);
        }
    }
    protected async Task CreateRole()
    {
        Role existingRole = await Task.Run(() => RoleService.GetRoleByName(roleObj.RoleName));
        if (existingRole != null)
        {
            notValidRoleName = true;
            return;

        }
        
        var selectedFunctions = functionList.Where(f => selectedFunctionIds.Contains(f.Id)).ToList();
        roleObj.Functions = selectedFunctions;
        await RoleService.CreateRole(roleObj);
        NavigationManager.NavigateTo("role");
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("role");
    }
}
