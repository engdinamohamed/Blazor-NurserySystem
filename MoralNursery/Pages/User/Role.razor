@page "/user/role/{userId:int}"
@inject IRoleService RoleService
@inject IUserService UserService
@inject NavigationManager NavigationManager
<style>
    .row {
        margin-top: 10px !important;
    }
</style>

<Card Style="width:100%;margin-bottom:50px;">
    <CardHeader Color="CardColor.Light">
        <div class="row">
            <div class="col-lg-9">
                <h2>Edit User Role</h2>
            </div>
            <div class="col-lg-3 text-right">                
                <a style="border:none;background-color:transparent;" href="/user" role="button">
                    <Icon Name="IconName.TextIndentRight" Size="IconSize.x2" Color="IconColor.Primary" />
                </a>

            </div>
        </div>
        
    </CardHeader>
    <CardBody>
        <EditForm Model="@userObj" OnValidSubmit="EditUserRole">
            <div class="row">
                <div class="col-md-8">
                    <div class="form-group">
                        <label for="Classroom" class="control-label"> User Name</label>
                        <input for="Classroom" class="form-control" @bind="@userObj.Username" readonly />

                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-8">
                    <div class="form-group">
                        <label for="Classroom" class="control-label"> Roles</label>

                        @if (roleList != null)
                        {
                            @foreach (var role in roleList)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="@role.Id" @bind="@role.IsSelected" />
                                    <label class="form-check-label" for="@role.Id">
                                        @role.RoleName
                                    </label>
                                </div>
                            }
                        }


                    </div>
                </div>
            </div>
            <div class="row" style="margin-top:50px;margin-bottom:50px;">
                <div class="col-md-4">
                    <div class="form-group">
                        <input type="submit" class="btn btn-primary" value="Save" />
                        <input type="button" class="btn btn-primary" @onclick="@Cancel" value="Cancel" />
                    </div>
                </div>
            </div>
        </EditForm>
    </CardBody>
</Card>




@code {
    [Parameter]
    public int userId { get; set; }

    User userObj = new User();
    //bool notValidRoleName;
    List<RoleViewModel> roleList = new List<RoleViewModel>();
    private List<int> selectedRolesIds = new();

    protected override async Task OnInitializedAsync()
    {
        var roles = await Task.Run(() => RoleService.GetRoles());
        roleList = roles.Select(r => new RoleViewModel
            {
                Id = r.Id,
                RoleName = r.RoleName,               
                IsSelected = false
            }).ToList();
        userObj = await Task.Run(() => UserService.GetUserById(Convert.ToInt32(userId)));
        //add roleObj.Function to selectedFunctionIds and check the checkbox
        if (userObj.Roles != null)
        {
            selectedRolesIds = userObj.Roles.Select(r => r.Id).ToList();
            foreach (var role in roleList)
            {
                role.IsSelected = selectedRolesIds.Contains(role.Id);
            }
        }

    }
   
    protected async Task EditUserRole()
    {
        
        // Clear the existing functions list
        userObj.Roles.Clear();

        // Add selected functions to the role's functions list
        foreach (var role in roleList)
        {
            if (role.IsSelected)
            {
                userObj.Roles.Add(new MoralNursery.Data.Models.Role
                    {
                        Id = role.Id,
                        RoleName = role.RoleName,
                       
                    });
            }
        }
        await UserService.UpdateUser(userObj);
        NavigationManager.NavigateTo("user");
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("user");
    }

    private class RoleViewModel
    {
        public int Id { get; set; }
        public string RoleName { get; set; }       
        public bool IsSelected { get; set; }
    }
}
